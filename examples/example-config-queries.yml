# Simple setup instructions:
#
# docker run --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=unsecure -d mysql:8
# docker run -d --link mysql:mysql -p 5000:5000 --name sqlagent dbhi/sql-agent
# docker run -it --link mysql:mysql --rm mysql:8 sh -c 'exec mysql -h"mysql" -P"3306" -uroot -p"unsecure"'
#
# mysql>
# create database test;
# use test;
#
# create table Companies (
# 	id INTEGER NOT NULL AUTO_INCREMENT,
# 	name VARCHAR(20), 
# 	country VARCHAR(3),
# 	PRIMARY KEY (ID)
# );
# insert into Companies (name, country) values ('Company1', 'USA');
# insert into Companies (name, country) values ('Company1', 'SWE');
# insert into Companies (name, country) values ('Company1', 'IRL');
# insert into Companies (name, country) values ('Company2', 'IRL');
#
#
# select * from Companies;
# +----------+---------+
# | name     | country |
# +----------+---------+
# | Company1 | USA     |
# | Company1 | SWE     |
# | Company1 | IRL     |
# | Company2 | IRL     |
# +----------+---------+
# 4 rows in set (0.00 sec)
#
# -- Should you want to change the column name or upper case / lower case a column use 'as'
# --   note: the first character must be a lowercase character for grafana
# select name as companyName from Companies;
# +-------------+
# | companyName |
# +-------------+
# | Company1    |
# | Company1    |
# | Company1    |
# | Company2    |
# +-------------+
# 4 rows in set (0.00 sec)
#
# quit
#
# docker run -d -p 8080:8080 -v ${PWD}/example-config-queries.yml:/queries.yml -v ${PWD}/example-config.yml:/prometheus-sql.yml --link sqlagent:sqlagent --name prometheus-sql dbhi/prometheus-sql -service http://sqlagent:5000 -config prometheus-sql.yml
# curl http://localhost:8080/metrics

- nr_companies_per_country:
    sql: >
        select country, count(1) as cnt from Companies group by country
    data-field: cnt

# Missing database user, data source 'my-ds-missing-user' shall be used instead of the default 'my-ds'
- error_missing_user:
    data-source: my-ds-missing-user
    sql: >
        select * from dual
    interval: 30s

# Missing table
- error_missing_table:
    sql: >
        select * from missing_table
    interval: 30s

# Sub queries
# This will register two metrics:
# - response_time_count with cnt as value
# - response_time_sum with rt as value
- response_time:
    sql: >
        select count(*) as cnt, sum(response_time) as rt from requests
    sub-metrics:
      count: cnt
      sum: rt
    interval: 30s

# Histogram queries
# This will register an array of metrics intended for a histogram:
# - responseHistogram with label values of 0,1,2, and 3 representing the bin for seconds taken
- response_times:
    sql: >
        select count(CASE WHEN response_time >= 0 AND response_time <= 1 THEN 1 END) as 'le#1',
               count(CASE WHEN response_time > 1 AND response_time <= 2 THEN 1 END) as 'le#2',
               count(CASE WHEN response_time > 2 AND response_time <= 3 THEN 1 END) as 'le#3',
               count(CASE WHEN response_time > 3 THEN 1 END) as 'le#+Inf',
               sum(response_time) as s, count(response_time) as c
          from stats
    sub-metrics:
      bucket: 'le#'
      total: 's'
      count: 'c'
    interval: 30s

# Hard setting a field for easy labeling
# This will register an extra field intended to be used for labeling such as the case when two or
# more databases have similar records and you with to set a custom field for identifying the database:
# - last_login_time is generated with overlapping metric label 'systemName'
# - keep-case will allow uppercase keys and values to be passed to prometheus
- last_login_time:
    keep-case: true
    sql: >
        select *, 'user_portal_database' as 'systemName' from logins
    interval: 30s
- last_login_time:
    keep-case: true
    labels:
      systemName: user_registration_database
    sql: >
        select * from logins
    interval: 30s

